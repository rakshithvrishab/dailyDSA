class Solution {
    public int findCircleNum(int[][] mat) {
        //step1: create an adj list
        int V = mat.length;
        ArrayList<ArrayList<Integer>> al = new ArrayList<>();
        for(int i=0;i<V;i++) {
            al.add(new ArrayList<>());
        }
        for(int i=0;i<mat.length;i++) {
            for(int j=0;j<mat[0].length;j++) {
                if(i!=j && mat[i][j]==1) {
                    al.get(i).add(j);
                    al.get(j).add(i);
                }
            }
        }

        //step 2: create a visited array
        boolean[] vis = new boolean[V];
        Arrays.fill(vis, false);

        //step3: starting from 1st index in vis[] do a DFS
        int ans = 0;
        for(int i=0;i<vis.length;i++) {
            if(!vis[i]) {
                DFS(i,al,vis);
                ++ans;
            }
        }

        return ans;
    }

    public static void DFS(int start, ArrayList<ArrayList<Integer>> al, boolean[] vis) {
        //Base
        if(vis[start]==true) return;
        //Main
        vis[start] = true; //mark as visited
        for(int x: al.get(start)) {
            if(vis[x]==false) {
                DFS(x,al,vis);
            }            
        }
    }
}

