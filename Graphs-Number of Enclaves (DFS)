class Solution {
    public int numEnclaves(int[][] A) {
        int m = A.length;
        int n = A[0].length;

        // Step 1: Mark all boundary-connected land cells
        for (int i = 0; i < m; i++) {
            if (A[i][0] == 1) {
                dfs(A, i, 0);
            }
            if (A[i][n - 1] == 1) {
                dfs(A, i, n - 1);
            }
        }
        
        for (int j = 0; j < n; j++) {
            if (A[0][j] == 1) {
                dfs(A, 0, j);
            }
            if (A[m - 1][j] == 1) {
                dfs(A, m - 1, j);
            }
        }

        // Step 2: Just Count the land cells 
        //that cannot reach the boundary
        int count = 0;
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (A[i][j] == 1) {
                    count++;
                }
            }
        }

        return count;
    }

    // Helper function for DFS to mark all reachable land cells
    private void dfs(int[][] A, int r, int c) {
        // Base case: out of bounds or not land
        if (r < 0 || c < 0 || r >= A.length || c >= A[0].length || A[r][c] != 1) {
            return;
        }

        // Mark this cell as visited
        A[r][c] = -1;

        // Explore all 4 directions (up, down, left, right)
        dfs(A, r - 1, c);
        dfs(A, r + 1, c);
        dfs(A, r, c - 1);
        dfs(A, r, c + 1);
    }
}

