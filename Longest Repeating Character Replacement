import java.util.Arrays;

class Solution {
    public int characterReplacement(String s, int k) {
        int[] count = new int[26]; // Frequency array for A-Z
        int L = 0;
        int maxCount = 0; // Count of the most frequent character
        int maxLen = 0;
        for (int R = 0; R < s.length(); R++) {
            int idx = s.charAt(R) - 'A';
            count[idx]++;
            maxCount = Math.max(maxCount, count[idx]);

            // Calculate the number of characters to flip
            int flip = (R - L + 1) - maxCount;

            // If flips exceed k, move the left pointer
            if (flip > k) {
                count[s.charAt(L) - 'A']--; // Decrease the count of the left character
                L++; // Move the left pointer to the right
            }

            // Calculate the maximum length of the substring found so far
            maxLen = Math.max(maxLen, R - L + 1);
        }
        return maxLen;
    }
}

