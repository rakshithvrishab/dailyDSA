import java.util.HashMap;
import java.util.Map;

class Solution {
    public String minWindow(String s, String t) {
        if (s.length() < t.length()) {
            return "";
        }

        // Create a frequency map for characters in t
        Map<Character, Integer> tFrequency = new HashMap<>();
        for (char c : t.toCharArray()) {
            tFrequency.put(c, tFrequency.getOrDefault(c, 0) + 1);
        }

        // Initialize variables for the sliding window
        int required = tFrequency.size(); // Number of unique characters in t
        int formed = 0; // To keep track of how many unique characters are matched
        Map<Character, Integer> windowCounts = new HashMap<>();
        
        int l = 0; // Left pointer
        int r = 0; // Right pointer
        int minLength = Integer.MAX_VALUE;
        int minLeft = 0; // Starting index of the minimum window

        // Expand the window with the right pointer
        while (r < s.length()) {
            char c = s.charAt(r);
            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);

            // Check if this character is part of t and we have enough of it
            if (tFrequency.containsKey(c) && windowCounts.get(c).intValue() == tFrequency.get(c).intValue()) {
                formed++;
            }

            // Try and contract the window until it's no longer valid
            while (l <= r && formed == required) {
                char leftChar = s.charAt(l);
                
                // Save the smallest window and its size
                if (r - l + 1 < minLength) {
                    minLength = r - l + 1;
                    minLeft = l;
                }

                // Remove the left character from the window
                windowCounts.put(leftChar, windowCounts.get(leftChar) - 1);
                if (tFrequency.containsKey(leftChar) && windowCounts.get(leftChar).intValue() < tFrequency.get(leftChar).intValue()) {
                    formed--;
                }
                
                l++; // Move the left pointer to the right
            }

            r++; // Move the right pointer to the right
        }

        return minLength == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLength);
    }
}
