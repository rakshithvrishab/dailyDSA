import java.util.Stack;

class Solution {
    public int[] nextGreaterElements(int[] A) {
        int n = A.length;
        int[] result = new int[n];
        Stack<Integer> stk = new Stack<>();
        
        // Initialize result array with -1 (default value for no greater element)
        for (int i = 0; i < n; i++) {
            result[i] = -1;
        }
        
        // Traverse the array twice to simulate the circular nature
        for (int i = 0; i < 2 * n; i++) {
            int current = A[i % n];
            // Check for next greater elements in the stack
            while (!stk.isEmpty() && current > A[stk.peek()]) {
                // Set the result for the index in the stack
                result[stk.pop()] = current;
            }
            // Only push index if it's within the first round (0 to n-1)
            if (i < n) {
                stk.push(i);
            }
        }
        
        return result;
    }
}
