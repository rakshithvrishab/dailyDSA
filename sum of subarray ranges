class Solution {
    public long subArrayRanges(int[] nums) {
        long small = sumOfAllSmallInSA(nums);
        long large = sumOfAllLargeInSA(nums);
        return large - small;
    }

    public static long sumOfAllSmallInSA(int[] A) {
        int n = A.length;
        int[] pse = new int[n]; // Previous Smaller Element
        int[] nse = new int[n]; // Next Smaller Element
        Stack<Integer> stk = new Stack<>();

        // Calculate Previous Smaller Element
        for (int i = 0; i < n; i++) {
            while (!stk.isEmpty() && A[stk.peek()] >= A[i]) {
                stk.pop();
            }
            pse[i] = stk.isEmpty() ? -1 : stk.peek();
            stk.push(i);
        }

        stk.clear();
        
        // Calculate Next Smaller Element
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.isEmpty() && A[stk.peek()] > A[i]) {
                stk.pop();
            }
            nse[i] = stk.isEmpty() ? n : stk.peek();
            stk.push(i);
        }

        long result = 0;
        for (int i = 0; i < n; i++) {
            long leftCount = i - pse[i];
            long rightCount = nse[i] - i;
            result += A[i] * leftCount * rightCount;
        }    
        return result;
    }

    public static long sumOfAllLargeInSA(int[] A) {
        int n = A.length;
        int[] ple = new int[n]; // Previous Larger Element
        int[] nle = new int[n]; // Next Larger Element
        Stack<Integer> stk = new Stack<>();

        // Calculate Previous Larger Element
        for (int i = 0; i < n; i++) {
            while (!stk.isEmpty() && A[stk.peek()] <= A[i]) {
                stk.pop();
            }
            ple[i] = stk.isEmpty() ? -1 : stk.peek();
            stk.push(i);
        }

        stk.clear();
        
        // Calculate Next Larger Element
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.isEmpty() && A[stk.peek()] < A[i]) {
                stk.pop();
            }
            nle[i] = stk.isEmpty() ? n : stk.peek();
            stk.push(i);
        }

        long result = 0;
        for (int i = 0; i < n; i++) {
            long leftCount = i - ple[i];
            long rightCount = nle[i] - i;
            result += A[i] * leftCount * rightCount;
        }
        return result;
    }
}

