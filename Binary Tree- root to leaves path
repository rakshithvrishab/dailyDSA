class Solution {
    // Function to collect all paths from root to leaves
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        // Result list to hold all paths
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        
        // Temporary list to store the current path
        ArrayList<Integer> currentPath = new ArrayList<>();
        
        // Call the helper function to start DFS
        findPaths(root, currentPath, result);
        
        return result;
    }

    // Helper function to perform DFS and collect paths
    private static void findPaths(Node node, ArrayList<Integer> currentPath, ArrayList<ArrayList<Integer>> result) {
        // Base case: if the node is null, just return
        if (node == null) {
            return;
        }
        
        // Add the current node's data to the current path
        currentPath.add(node.data);
        
        // If it's a leaf node (both left and right are null), add the current path to the result
        if (node.left == null && node.right == null) {
            result.add(new ArrayList<>(currentPath));
        } else {
            // Otherwise, continue DFS on left and right subtrees
            findPaths(node.left, currentPath, result);
            findPaths(node.right, currentPath, result);
        }
        
        // Backtrack: remove the current node's data before returning to the previous level of recursion
        currentPath.remove(currentPath.size() - 1);
    }
}
