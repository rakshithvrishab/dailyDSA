class Solution {
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length;
        int n = heights[0].length;

        int[][] efforts = new int[m][n];
        for(int[] x: efforts) {
            Arrays.fill(x,Integer.MAX_VALUE);
        }
        efforts[0][0] = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Integer.compare(a[2],b[2]));
        pq.offer(new int[]{0,0,0}); //row,col and dist

        int[][] directions = {{-1,0},{0,-1},{1,0},{0,1}};

        while(pq.size()!=0) {
            int[] cur = pq.poll();
            int curRow = cur[0];
            int curCol = cur[1];
            int curEffort = cur[2];

            if(curRow==m-1 && curCol==n-1) {
                return curEffort;
            }

            for(int[] dir: directions) {
                int newRow = curRow+dir[0];
                int newCol = curCol+dir[1];

                if(newRow>=0 && newRow<m && newCol>=0 && newCol<n) {
                    int newEffort=Math.max(curEffort, Math.abs(heights[curRow][curCol]-heights[newRow][newCol]));

                    if(newEffort<efforts[newRow][newCol]){
                        efforts[newRow][newCol]=newEffort;
                        pq.offer(new int[]{newRow,newCol,newEffort});
                    }
                }
            }
        }

        return -1;
    }
}
