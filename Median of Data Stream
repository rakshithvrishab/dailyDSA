class MedianFinder {
    PriorityQueue<Integer> max;
    PriorityQueue<Integer> min;

    public MedianFinder() {
        max=new PriorityQueue<>((a,b)->Integer.compare(b,a));
        min=new PriorityQueue<>();
        
    }
    
    public void addNum(int num) {
        
        if(max.isEmpty()||num<max.peek()){
            max.add(num);
        }
        else{
            min.add(num);
        }
        if(min.size()-max.size()==1){
            max.add(min.peek());
            min.remove();
        }
        else if(max.size()-min.size()>1){
            min.add(max.peek());
            max.remove();
        }
        
    }
    
    public double findMedian() {
        if(min.size()==max.size()){
           return (double)(min.peek()+max.peek())/2;
        }
        return (double)max.peek();
        
    }
}
