class Solution {
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        int[] vis = new int[adj.size()];
        Arrays.fill(vis,0);
        
        for(int i=0;i<vis.length;i++) {
            if(vis[i]==0) {
                //starting DFS from 0
                //considering parent node is -1
                //as we are starting from here
               if( dfs(adj,vis,i,-1)) {
                   return true;
               }
            }
        }
        return false;
    }
    
    boolean dfs(ArrayList<ArrayList<Integer>> adj,int[] vis,int src, int prnt) {
        
        vis[src] = 1; //mark as visited
        for(int x: adj.get(src)) {
            if(vis[x]==0){
                if(dfs(adj,vis,x,src)){
                    return true;
                }
            }
            //remember, when we see a node which was already
            //visited and if it is not the parent 
            //the it means cycle exists
            else if(vis[x]==1 && x!=prnt){
                return true;
            }
        }
        return false;
    }
}

