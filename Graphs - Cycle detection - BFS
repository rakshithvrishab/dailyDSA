class Solution {
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[adj.size()];
        Arrays.fill(vis,false);
        for(int i=0;i<vis.length;i++) {
            if(vis[i]==false) {
                if(bfs(adj,i,vis)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public static boolean bfs(ArrayList<ArrayList<Integer>> adj, int src,boolean[] vis) {
        Queue<Integer> que = new LinkedList<>();
        int[] parent = new int[vis.length];
        Arrays.fill(parent,-1);
        que.offer(src);
        parent[src] = -1; //bcz we are starting from here
        vis[src]=true;
        
        while(que.size()!=0) {
            int cur = que.poll();
            //iterate on cur neighbors
            //add them to queue if they're not visited
            //also store who is its parent
            for(int x: adj.get(cur)) {
                if(vis[x]==false) {
                    que.offer(x);
                    vis[x]=true;
                    parent[x]=cur; 
                }
                else{ //if node is visited
                    //if the parent is not same as cur
                    //then cycle exists
                    if(x!=parent[cur]) {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
}
