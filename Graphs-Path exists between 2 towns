public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int solve(ArrayList<Integer> A, final int B, final int C) {
        //Step 1: Build an Adj List 
        ArrayList<Integer>[] AL = new ArrayList[A.size()+1];
        for(int i=1;i<AL.length;i++) {
            AL[i] = new ArrayList<>();
        }

        for(int i=1;i<A.size();i++) {
            int src = A.get(i);
            int dest = i+1;

            AL[src].add(dest);
        }

        //Do a BFS
        boolean[] vis = new boolean[A.size()+1];
        Arrays.fill(vis,false);

        Queue<Integer> que = new LinkedList<>();
        que.offer(C); //start from the source
        vis[C]=true; //mark as visited

        while(que.size()!=0) {
            int cur = que.poll();
            for(int x: AL[cur]) {
                if(vis[x]==false){
                    que.offer(x);
                    vis[x]=true;
                }
            }
        }

        if(vis[B]){
            return 1;
        }
        return 0;
    }
}


//TC: O(N+E) SC: O(N+E)
