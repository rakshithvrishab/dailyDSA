// User function Template for Java
class Solution {
    public int[] shortestPath(int v, int E, int[][] edges) {
        //step 1:Create adj list
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<v;i++) {
            adj.add(new ArrayList<>());
        }
        for(int[] x:edges) {
            int src = x[0];
            int dest = x[1];
            int dist = x[2];
            
            adj.get(src).add(new Pair(dest,dist));
        }
        
        //Step 2:Do a toposort via DFS
        //it is given that graph is DAG, hence
        //no need of pathVis[] array as there wont
        //be any cycles
        Stack<Integer> stk = new Stack<>();
        int[] vis = new int[v];
        Arrays.fill(vis , 0);
        
        for(int i=0;i<v;i++) {
            if(vis[i]==0) {
                dfs(adj,vis,stk,i);
            }
        }
        
        
        //find 0(i,e source) in stack
        while(stk.size()!=0) {
            if(stk.peek()!=0) {
                stk.pop();
            }else{
                break;
            }
        }
        //Step 3:find the shortest dist of all nodes from node 0
        int[] dist = new int[v];
        Arrays.fill(dist , Integer.MAX_VALUE);
        dist[0] = 0; //bcz 0 is the src
        
        while(stk.size()!=0){
            int cur = stk.pop();
		//for getting the curDist from dist[], we have
            //done the toposort in the begining
            int  curDist = dist[cur]; 
            
            for(Pair x:adj.get(cur)) {
                int neighbourNode = x.node;
                int neighborDist = x.dist;
                
                if(dist[neighbourNode] > curDist+neighborDist){
                    dist[neighbourNode] = curDist+neighborDist;
                }
            }
        }
        
        for(int i=0;i<v;i++) {
            if(dist[i]==Integer.MAX_VALUE) {
                dist[i] = -1;
            }
        }
        
        return dist;
    }
    
    public static void dfs(ArrayList<ArrayList<Pair>> adj,int[] vis,
    Stack<Integer> stk, int src) {
        //Base
        
        //Main
        vis[src]=1;
        for(Pair x: adj.get(src)) {
            if(vis[x.node]==0) {
                dfs(adj,vis,stk,x.node);
            }
        }
        
        stk.push(src);
    }
    
    static class Pair{
        int node;
        int dist;
        Pair(int n, int d){
            node = n;
            dist = d;
        }
    }
}

