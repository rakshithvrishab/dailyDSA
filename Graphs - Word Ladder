class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> hs = new HashSet<>();
        hs.add(beginWord);
        for(String x: wordList){
            hs.add(x);
        }
        Queue<Combo> que = new LinkedList<>();
        que.add(new Combo(beginWord , 1));
        while(que.size()!=0){
            Combo cur = que.poll();
            String curWord = cur.word;
            int curStep = cur.step;

            if(curWord.equals(endWord)){
                return curStep;
            }

            int wordLen=curWord.length();
            for(int charPos=0;charPos<wordLen;charPos++) {
                for(char ch='a';ch<='z';ch++){
                    StringBuilder sb = new StringBuilder(curWord);
                    sb.setCharAt(charPos, ch);
                    if(hs.contains(sb.toString())==true){
                        hs.remove(sb.toString());
                        que.offer(new Combo(sb.toString(), curStep+1));
                    }
                }
            }
        }
        return 0;
    }

    public static class Combo {
        String word;
        int step;
        public Combo(String word,int step){
            this.word=word;
            this.step=step;
        }
    }
}

