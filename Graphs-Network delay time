class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        //Step 1: Adj list
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<n+1;i++) {
            adj.add(new ArrayList<>());
        }
        for(int[] x: times) {
            int start=x[0];
            int end = x[1];
            adj.get(start).add(new Pair(end,x[2]));
        }

        //Dijkstra's
        int[] dist = new int[n+1];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[k] = 0;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->Integer.compare(a.dist,b.dist));
        pq.offer(new Pair(k,0));

        while(pq.size()!=0) {
            Pair cur = pq.poll();
            int curNode = cur.node;
            int curDist = cur.dist;

            for(Pair x: adj.get(curNode)) {
                int adjNode = x.node;
                int adjDist = x.dist;

                if(dist[adjNode]>curDist+adjDist) {
                    dist[adjNode]=curDist+adjDist;
                    pq.offer(new Pair(adjNode , curDist+adjDist));
                }
            }
        }

        int ans = Integer.MIN_VALUE;
        for(int i=1;i<dist.length;i++) {
            if(dist[i]>ans){
                ans = dist[i];
            }
        }

        if(ans==Integer.MAX_VALUE){
            return -1;
        }
        return ans;
    }

    static class Pair{
        int node;
        int dist;
        Pair(int n,int d) {
            node = n;
            dist = d;
        }
    }
}

