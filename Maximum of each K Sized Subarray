
class Solution{
    // Function to find maximum of each subarray of size k.
    static ArrayList<Integer> max_of_subarrays(int arr[], int n, int k){
        ArrayList<Integer> result = new ArrayList<>();
        Deque<Integer> deque = new LinkedList<>();
        
        for (int i = 0; i < n; i++){
            // Remove elements that are out of this window
            if (!deque.isEmpty() && deque.peekFirst() == i - k){
                deque.pollFirst();
            }
            
            // Remove elements from the deque which are smaller than the current element
            while (!deque.isEmpty() && arr[deque.peekLast()] <= arr[i]){
                deque.pollLast();
            }
            
            // Add the current element at the end of the deque
            deque.offerLast(i);
            
            // The first window is processed after we have processed at least k elements
            if (i >= k - 1){
                result.add(arr[deque.peekFirst()]);
            }
        }
        
        return result;
    }
}
