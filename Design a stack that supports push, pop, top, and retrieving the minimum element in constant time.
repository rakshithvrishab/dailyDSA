import java.util.Stack;

class MinStack {
    private Stack<Integer> stk;
    private Stack<Integer> minStk;

    public MinStack() {
        stk = new Stack<>();
        minStk = new Stack<>();
    }
    
    public void push(int val) {
        stk.push(val);
        // Push to minStk if it's empty or the new value is smaller than or equal to the current minimum
        if (minStk.isEmpty() || val <= minStk.peek()) {
            minStk.push(val);
        }
    }
    
    public void pop() {
        // Ensure the pop operation is only called on a non-empty stack
        if (stk.peek().equals(minStk.peek())) {
            minStk.pop();
        }
        stk.pop();
    }
    
    public int top() {
        return stk.peek();
    }
    
    public int getMin() {
        return minStk.peek();  // Just use peek() to get the top element
    }
}


