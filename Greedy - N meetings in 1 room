class Solution {
    public int maxMeetings(int start[], int end[]) {
        int n = start.length;
        List<Pair> al = new ArrayList<>();
        for(int i=0;i<n;i++) {
            al.add(new Pair(start[i],end[i],i+1));
        }
        
        Collections.sort(al, new Comparator<Pair>() {
           @Override
           public int compare(Pair p1, Pair p2) {
               return p1.end-p2.end;
           }
        });
        
        
        int curStart = al.get(0).start;
        int curEnd = al.get(0).end;
        int meets = 1;
        for(int i=1;i<al.size();i++) {
            if(al.get(i).start>curEnd){
                curEnd = al.get(i).end;
                ++meets;
            }else{
                continue;
            }
        }
        return meets;
    }
    
    static class Pair{
        int start;
        int end;
        int pos;
        Pair(int s, int e, int p) {
            start = s;
            end = e;
            pos = p;
        }
    }
}

