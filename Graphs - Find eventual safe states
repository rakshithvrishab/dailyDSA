class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int v = graph.length;
        //generate Adj list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<v;i++) {
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<v;i++) {
            for(int x: graph[i]) {
                adj.get(i).add(x);
            }
        }

        //create vis and pathVis arrays
        int[] vis = new int[v];
        int[] pathVis = new int[v];
        Arrays.fill(vis , 0);
        Arrays.fill(pathVis , 0);
        Stack<Integer> stk = new Stack<>();

        for(int i=0;i<v;i++) {
            if(vis[i]==0) {
                dfs(adj,vis,pathVis,stk,i);
            }
        }

        List<Integer> ans = new ArrayList<>(stk);
        Collections.sort(ans);
        return ans;
    }

    public static boolean dfs(ArrayList<ArrayList<Integer>> adj,int[] vis, int[] pathVis, Stack<Integer> stk, int src) {
        //base

        //Main
        vis[src] = 1;
        pathVis[src]=1;

        for(int x: adj.get(src)) {
            if(vis[x]==0) {
                if(dfs(adj,vis,pathVis,stk,x)){
                    return true; //cycle exists
                }
            }else if(pathVis[x]==1) {
                return true; //cycle exists
            }
        }

        pathVis[src]=0;
        stk.push(src);
        return false;
    }
}

//Time Complexity: O(V+E)
// Space Complexity: O(V)
