class Solution {
    public ListNode insertionSortList(ListNode head) {
        // Create a dummy node to simplify insertion at the head
        ListNode dummy = new ListNode(0);
        
        // Start from the first node in the input list
        ListNode current = head;
         
        // Traverse the input list
        while (current != null) {
            // Start from the sorted portion (dummy node)
            ListNode prev = dummy;
            
            // Find the right spot to insert the current node in the sorted portion
            while (prev.next != null && prev.next.val < current.val) {
                prev = prev.next;
            }
            
            // Save the next node to be processed
            ListNode nextTemp = current.next;
            
            // Insert the current node between prev and prev.next
            current.next = prev.next;
            prev.next = current;
            
            // Move to the next node in the unsorted portion
            current = nextTemp;
        }
        
        // Return the head of the sorted list (skip the dummy node)
        return dummy.next;
    }
}

