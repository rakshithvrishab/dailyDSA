class Solution {
    public int numEnclaves(int[][] A) {
        int m = A.length;
        int n = A[0].length;
        Queue<Pair> que = new LinkedList<>();
        // Step 1: Mark all boundary-connected land cells
        for (int i = 0; i < m; i++) {
            if (A[i][0] == 1) {
                que.offer(new Pair(i,0));
                A[i][0] = -1;
            }
            if (A[i][n - 1] == 1) {
                que.offer(new Pair(i,n-1));
                A[i][n - 1] = -1;
            }
        }
        
        for (int j = 0; j < n; j++) {
            if (A[0][j] == 1) {
                que.offer(new Pair(0,j));
                A[0][j] = -1;
            }
            if (A[m - 1][j] == 1) {
                que.offer(new Pair(m-1,j));
                A[m - 1][j] = -1;
            }
        }

        //BFS
        while(que.size()!=0) {
            Pair cur = que.poll();
            int r = cur.r;
            int c = cur.c;
            

            //up
            if(r-1>=0 && A[r-1][c]==1) {
                que.offer(new Pair(r-1,c));
                A[r-1][c]=-1;
            }
            //down
            if(r+1<m && A[r+1][c]==1) {
                que.offer(new Pair(r+1,c));
                A[r+1][c]=-1;
            }
            //left
            if(c-1>=0 && A[r][c-1]==1) {
                que.offer(new Pair(r,c-1));
                A[r][c-1]=-1;
            }
            //right
            if(c+1<n && A[r][c+1]==1) {
                que.offer(new Pair(r,c+1));
                A[r][c+1]=-1;
            }
        }
        // Step 2: Just Count the land cells that cannot reach the boundary
        int count = 0;
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (A[i][j] == 1) {
                    count++;
                }
            }
        }

        return count;
    }

    
    
    static class Pair{
        int r; 
        int c;
        Pair(int row, int col) {
            r=row;
            c=col;
        }
    }
}

