class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int n = cardPoints.length;
        int totalSum = 0;
        for (int point : cardPoints) {
            totalSum += point;
        }
        
        if (k == n) {
            return totalSum;  // If we take all cards, return the total sum.
        }
        
        // The size of the window is n - k
        int windowSize = n - k;
        int currentWindowSum = 0;

        // Calculate the sum of the first window of size n - k
        for (int i = 0; i < windowSize; i++) {
            currentWindowSum += cardPoints[i];
        }
        
        int minWindowSum = currentWindowSum;

        // Slide the window across the array
        for (int i = windowSize; i < n; i++) {
            currentWindowSum += cardPoints[i] - cardPoints[i - windowSize];
            minWindowSum = Math.min(minWindowSum, currentWindowSum);
        }

        // The maximum score is totalSum - minWindowSum
        return totalSum - minWindowSum;
    }
}
