class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        //fill board with '.'
        for(char[] brd: board) {
            Arrays.fill(brd , '.');
        }

        f(board , ans, 0);

        return ans;
    }

    public static void f(char[][] brd,List<List<String>> ans, int R) {
        //Base Case
        if(R==brd.length) {
            ans.add(constructBoard(brd));
            return;
        }
        //Main Logic
        for(int C=0;C<brd.length;C++) {
            if(isValid(brd , R ,C)){
                brd[R][C] = 'Q';
                f(brd,ans,R+1);
                brd[R][C]='.';
            }
        }
    }

    public static List<String> constructBoard(char[][] brd) {
        List<String> res = new ArrayList<>();
        for(char[] rw:brd) {
            res.add(new String(rw));
        }
        return res;
    }


    private static boolean isValid(char[][] board, int row, int col) {
        // Check for queens in the same column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        // Check for queens in the diagonal up-left
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Check for queens in the diagonal up-right
        for (int i = row, j = col; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }
}
