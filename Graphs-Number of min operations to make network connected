class Solution {
    public int makeConnected(int n, int[][] connections) {
        if (connections.length < n - 1) {
            return -1; // Not enough connections to connect all nodes
        }
        
        Disjoint dj = new Disjoint(n);
        int extraCon = 0;

        for (int[] con : connections) {
            if (dj.findParent(con[0]) != dj.findParent(con[1])) {
                dj.join(con[0], con[1]);
            } else {
                ++extraCon;
            }
        }

        int components = 0;
        for (int i = 0; i < n; i++) { // Correct loop range
            if (dj.par[i] == i) {
                ++components;
            }
        }

        if (extraCon >= components - 1) {
            return components - 1;
        }
        return -1;
    }
}

class Disjoint {
    int n;
    int[] par;
    int[] size;

    Disjoint(int n) {
        par = new int[n]; // Corrected size
        size = new int[n]; // Corrected size

        for (int i = 0; i < n; i++) { // Correct loop range
            size[i] = 1;
            par[i] = i;
        }
    }

    public void join(int x, int y) {
        int parX = findParent(x);
        int parY = findParent(y);

        if (size[parX] > size[parY]) {
            par[parY] = parX;
            size[parX] += size[parY];
        } else {
            par[parX] = parY;
            size[parY] += size[parX];
        }
    }

    public int findParent(int x) {
        if (par[x] == x) {
            return x;
        }
        return par[x] = findParent(par[x]);
    }
}

